-- Lirabay-like UI (Wind-style, tab nh·ªè + intro)
-- D√°n script n√†y v√†o m·ªôt LocalScript trong StarterGui (v·ªõi m·ªôt ScreenGui parent)
-- T√πy ch·ªânh c√°c bi·∫øn b√™n d∆∞·ªõi ƒë·ªÉ ƒë·ªïi m√†u, t√™n v√† k√≠ch th∆∞·ªõc.

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "LirabayCustomUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

-- ========== Config ==========
local THEME = {
    Primary = Color3.fromRGB(25, 27, 30),
    Accent = Color3.fromRGB(50, 153, 255),
    Secondary = Color3.fromRGB(36, 38, 41),
    Text = Color3.fromRGB(240,240,240)
}
local UI_SCALE = 0.85 -- 1 = normal, <1 nh·ªè h∆°n (d√πng cho mobile)
local TAB_WIDTH = UDim.new(0, 64 * UI_SCALE) -- width c·ªßa sidebar tab (nh·ªè)
local TAB_ICON_SIZE = UDim2.new(0, 28 * UI_SCALE, 0, 28 * UI_SCALE)
local CONTENT_PADDING = 12 * UI_SCALE
local INTRO_ENABLED = true
local INTRO_TIME = 0.7
local TWEEN_TIME = 0.25
local TABS = {
    { id = "home", label = "Home", icon = "üè†" },
    { id = "scripts", label = "Scripts", icon = "üìú" },
    { id = "settings", label = "C√†i ƒë·∫∑t", icon = "‚öôÔ∏è" },
}

-- ========== Helpers ==========
local function applyStroke(inst, thickness)
    local s = Instance.new("UIStroke")
    s.Thickness = thickness or 1
    s.Transparency = 0.8
    s.Parent = inst
    return s
end

local function makeText(label, size, bold)
    local t = Instance.new("TextLabel")
    t.Text = label
    t.Font = Enum.Font.Gotham
    t.TextSize = size
    t.TextColor3 = THEME.Text
    t.BackgroundTransparency = 1
    t.RichText = true
    t.TextXAlignment = Enum.TextXAlignment.Left
    t.TextYAlignment = Enum.TextYAlignment.Center
    t.RichText = true
    if bold then t.Font = Enum.Font.GothamBold end
    return t
end

-- ========== Build UI ==========
local root = Instance.new("Frame")
root.Name = "Root"
root.Size = UDim2.new(0.9, 0, 0.8, 0)
root.Position = UDim2.new(0.05, 0, 0.1, 0)
root.AnchorPoint = Vector2.new(0,0)
root.BackgroundColor3 = THEME.Primary
root.BorderSizePixel = 0
root.Parent = screenGui

-- Rounded corners
local cor = Instance.new("UICorner", root)
cor.CornerRadius = UDim.new(0, 12 * UI_SCALE)

-- Left sidebar (tabs)
local sidebar = Instance.new("Frame")
sidebar.Name = "Sidebar"
sidebar.Size = UDim2.new(0, TAB_WIDTH.Offset, 1, 0)
sidebar.Position = UDim2.new(0, 0, 0, 0)
sidebar.BackgroundColor3 = THEME.Secondary
sidebar.BorderSizePixel = 0
sidebar.Parent = root
Instance.new("UICorner", sidebar).CornerRadius = UDim.new(0, 12 * UI_SCALE)

-- Content area
local content = Instance.new("Frame")
content.Name = "Content"
content.Size = UDim2.new(1, -TAB_WIDTH.Offset, 1, 0)
content.Position = UDim2.new(0, TAB_WIDTH.Offset, 0, 0)
content.BackgroundTransparency = 1
content.Parent = root

-- Content inner panel
local contentPanel = Instance.new("Frame")
contentPanel.Name = "ContentPanel"
contentPanel.Size = UDim2.new(1, - (CONTENT_PADDING*2), 1, - (CONTENT_PADDING*2))
contentPanel.Position = UDim2.new(0, CONTENT_PADDING, 0, CONTENT_PADDING)
contentPanel.BackgroundColor3 = Color3.fromRGB(16,16,16)
contentPanel.BorderSizePixel = 0
contentPanel.Parent = content
Instance.new("UICorner", contentPanel).CornerRadius = UDim.new(0, 10 * UI_SCALE)

-- Title
local title = makeText("Lirabay UI", 20 * UI_SCALE, true)
title.Size = UDim2.new(1, -10, 0, 36 * UI_SCALE)
title.Position = UDim2.new(0, 12 * UI_SCALE, 0, 8 * UI_SCALE)
title.Parent = contentPanel

-- Container for pages
local pages = Instance.new("Folder")
pages.Name = "Pages"
pages.Parent = contentPanel

-- Create a simple page factory
local function createPage(id, label)
    local page = Instance.new("Frame")
    page.Name = id .. "_page"
    page.Size = UDim2.new(1, 0, 1, -48 * UI_SCALE)
    page.Position = UDim2.new(0, 0, 0, 48 * UI_SCALE)
    page.BackgroundTransparency = 1
    page.Parent = pages

    local sample = Instance.new("TextLabel")
    sample.Size = UDim2.new(1, -24 * UI_SCALE, 0, 30 * UI_SCALE)
    sample.Position = UDim2.new(0, 12 * UI_SCALE, 0, 20 * UI_SCALE)
    sample.BackgroundTransparency = 1
    sample.Text = ("ƒê√¢y l√† trang %s"):format(label)
    sample.Font = Enum.Font.Gotham
    sample.TextSize = 16 * UI_SCALE
    sample.TextColor3 = THEME.Text
    sample.Parent = page

    return page
end

-- Build tabs and pages
local tabButtons = {}
local selectedTab = nil
local function selectTab(tabBtn, page)
    if selectedTab == tabBtn then return end
    -- deselect previous
    if selectedTab then
        selectedTab.Frame.BackgroundTransparency = 0
        selectedTab.Label.TextColor3 = THEME.Text
        TweenService:Create(selectedTab.Frame, TweenInfo.new(TWEEN_TIME), {BackgroundColor3 = THEME.Secondary}):Play()
    end
    -- select new
    selectedTab = tabBtn
    TweenService:Create(tabBtn.Frame, TweenInfo.new(TWEEN_TIME), {BackgroundColor3 = THEME.Accent}):Play()
    tabBtn.Label.TextColor3 = Color3.new(1,1,1)
    -- animate pages
    for _, p in ipairs(pages:GetChildren()) do
        if p == page then
            p.Visible = true
            p.Position = UDim2.new(1, 0, p.Position.Y.Scale, p.Position.Y.Offset)
            TweenService:Create(p, TweenInfo.new(TWEEN_TIME, Enum.EasingStyle.Quad), {Position = UDim2.new(0, 0, p.Position.Y.Scale, p.Position.Y.Offset)}):Play()
        else
            TweenService:Create(p, TweenInfo.new(TWEEN_TIME, Enum.EasingStyle.Quad), {Position = UDim2.new(-1, 0, p.Position.Y.Scale, p.Position.Y.Offset)}):Play()
            -- hide after tween
            spawn(function()
                wait(TWEEN_TIME)
                p.Visible = false
            end)
        end
    end
end

-- Create UI tab buttons
local padding = Instance.new("UIListLayout", sidebar)
padding.Padding = UDim.new(0, 8 * UI_SCALE)
padding.FillDirection = Enum.FillDirection.Vertical
padding.SortOrder = Enum.SortOrder.LayoutOrder
padding.HorizontalAlignment = Enum.HorizontalAlignment.Center
padding.VerticalAlignment = Enum.VerticalAlignment.Top

local topSpacing = Instance.new("Frame")
topSpacing.Size = UDim2.new(1, 0, 0, 12 * UI_SCALE)
topSpacing.BackgroundTransparency = 1
topSpacing.Parent = sidebar

for i, tinfo in ipairs(TABS) do
    local container = Instance.new("Frame")
    container.Name = tinfo.id .. "_btn"
    container.Size = UDim2.new(1, -12 * UI_SCALE, 0, 48 * UI_SCALE)
    container.BackgroundColor3 = THEME.Secondary
    container.BorderSizePixel = 0
    container.LayoutOrder = i
    container.Parent = sidebar
    Instance.new("UICorner", container).CornerRadius = UDim.new(0, 10 * UI_SCALE)

    local icon = Instance.new("TextLabel")
    icon.Size = TAB_ICON_SIZE
    icon.Position = UDim2.new(0, 8 * UI_SCALE, 0.5, -TAB_ICON_SIZE.Y.Offset/2)
    icon.BackgroundTransparency = 1
    icon.Text = tinfo.icon or "?"
    icon.Font = Enum.Font.Gotham
    icon.TextSize = 18 * UI_SCALE
    icon.TextColor3 = THEME.Text
    icon.Parent = container

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, - (TAB_ICON_SIZE.X.Offset + 20 * UI_SCALE), 1, 0)
    label.Position = UDim2.new(0, TAB_ICON_SIZE.X.Offset + 12 * UI_SCALE, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = tinfo.label
    label.Font = Enum.Font.Gotham
    label.TextSize = 14 * UI_SCALE
    label.TextColor3 = THEME.Text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    -- create page for this tab
    local pg = createPage(tinfo.id, tinfo.label)
    pg.Visible = false

    -- make clickable
    local btn = Instance.new("TextButton")
    btn.Text = ""
    btn.Size = UDim2.new(1, 0, 1, 0)
    btn.BackgroundTransparency = 1
    btn.Parent = container

    local tabBtn = { Frame = container, Icon = icon, Label = label, Button = btn, Page = pg }
    table.insert(tabButtons, tabBtn)

    btn.Activated:Connect(function()
        selectTab(tabBtn, pg)
    end)
end

-- Select first tab by default
if #tabButtons > 0 then
    selectTab(tabButtons[1], tabButtons[1].Page)
end

-- ========== Intro animation ==========
if INTRO_ENABLED then
    local overlay = Instance.new("Frame")
    overlay.Size = UDim2.new(1, 0, 1, 0)
    overlay.Position = UDim2.new(0, 0, 0, 0)
    overlay.BackgroundColor3 = THEME.Primary
    overlay.Parent = screenGui
    overlay.ZIndex = 999
    overlay.Name = "IntroOverlay"

    local logo = Instance.new("TextLabel")
    logo.Size = UDim2.new(0, 0, 0, 0)
    logo.AnchorPoint = Vector2.new(0.5, 0.5)
    logo.Position = UDim2.new(0.5, 0.45, 0, 0)
    logo.BackgroundTransparency = 1
    logo.Font = Enum.Font.GothamBlack
    logo.Text = "LiraBay"
    logo.TextSize = 28 * UI_SCALE
    logo.TextColor3 = THEME.Accent
    logo.Parent = overlay

    -- animate: scale up + fade out overlay
    logo.Size = UDim2.new(0, 0, 0, 0)
    TweenService:Create(logo, TweenInfo.new(INTRO_TIME, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(0, 220 * UI_SCALE, 0, 44 * UI_SCALE)}):Play()
    wait(INTRO_TIME + 0.12)
    TweenService:Create(overlay, TweenInfo.new(0.45, Enum.EasingStyle.Quart), {BackgroundTransparency = 1}):Play()
    TweenService:Create(logo, TweenInfo.new(0.45), {TextTransparency = 1}):Play()
    wait(0.45)
    overlay:Destroy()
end

-- ========== Mobile responsiveness ==========
-- Scale UI down if screen is small
local function adjustScale()
    local resX = workspace.CurrentCamera.ViewportSize.X
    if resX < 1000 then
        root.Size = UDim2.new(0.95, 0, 0.88, 0)
        root.Position = UDim2.new(0.025, 0, 0.06, 0)
    else
        root.Size = UDim2.new(0.9, 0, 0.8, 0)
        root.Position = UDim2.new(0.05, 0, 0.1, 0)
    end
end
adjustScale()
workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(adjustScale)

-- Optional: make root draggable (for PC)
local dragging = false
local dragInput, dragStart, startPos
root.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and not (game:GetService("UserInputService"):GetPlatform() == Enum.Platform.Android) then
        dragging = true
        dragStart = input.Position
        startPos = root.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)
root.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)
game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragInput and dragging and dragStart and startPos then
        local delta = input.Position - dragStart
        root.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- ========== End of UI ==========
print("Lirabay custom UI loaded.")
