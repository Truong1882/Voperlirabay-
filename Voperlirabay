-- Granny1 â€” ESP + Locator (Rayfield UI)
-- Paste into executor (Synapse X / Fluxus / KRNL / Delta)
-- Uses BillboardGui for ESP, nil-safe distance checks, GUIs created once and toggled.

-- ===== CONFIG =====
local KEY_LIST = {
    "Master key",
    "Playhouse key",
    "Rusty padlock key",
    "Weapon key",
    "Car key",
    "Safekey",
}
local KEY_COLORS = {
    ["Master key"] = Color3.fromRGB(255,215,0),
    ["Playhouse key"] = Color3.fromRGB(0,170,255),
    ["Rusty padlock key"] = Color3.fromRGB(160,82,45),
    ["Weapon key"] = Color3.fromRGB(220,20,60),
    ["Car key"] = Color3.fromRGB(100,255,100),
    ["Safekey"] = Color3.fromRGB(200,200,255),
}
local STUD_TO_METER = 0.28

-- ===== SERVICES =====
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = workspace
local Debris = game:GetService("Debris")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Camera = Workspace.CurrentCamera

-- ===== SAFE HTTP LOAD Rayfield (try multiple URLs) =====
local function safeHttpGet(url)
    local ok, res = pcall(function() return game:HttpGet(url) end)
    if ok then return res end
    return nil
end

local Rayfield = nil
do
    local candidates = {
        "https://sirius.menu/rayfield",
        "https://raw.githubusercontent.com/shlexware/Rayfield/main/source.lua",
        "https://raw.githubusercontent.com/BenVlodgi/Rayfield/main/source.lua",
        "https://raw.githubusercontent.com/shlexware/Orion/main/source.lua" -- fallback not Rayfield but in case
    }
    for _, url in ipairs(candidates) do
        local code = safeHttpGet(url)
        if code then
            local ok, lib = pcall(function() return loadstring(code)() end)
            if ok and lib then
                Rayfield = lib
                break
            end
        end
    end
end

if not Rayfield then
    warn("[Granny1] Rayfield could not be loaded. UI will not appear. Please ensure HttpGet works or provide Rayfield.")
end

-- ===== UTILITIES =====
local function getBasePart(inst)
    if not inst then return nil end
    if inst:IsA("BasePart") then return inst end
    if inst:IsA("Model") then
        if inst.PrimaryPart and inst.PrimaryPart:IsA("BasePart") then return inst.PrimaryPart end
        for _,v in ipairs(inst:GetDescendants()) do
            if v:IsA("BasePart") then return v end
        end
    end
    return nil
end

local function safeDistanceToPosition(pos)
    if not pos then return nil, nil end
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil, nil end
    local studs = (hrp.Position - pos).Magnitude
    local meters = studs * STUD_TO_METER
    return studs, string.format("%.1f m (%.0f studs)", meters, studs)
end

local function safeDistanceToInstance(inst)
    local part = getBasePart(inst)
    if not part then return nil, nil end
    return safeDistanceToPosition(part.Position)
end

local function createBillboard(inst, initialText, color)
    local part = getBasePart(inst)
    if not part then return nil end
    local bg = Instance.new("BillboardGui")
    bg.Name = "G1_ESP"
    bg.Adornee = part
    bg.AlwaysOnTop = true
    bg.Size = UDim2.new(0,200,0,44)
    bg.StudsOffset = Vector3.new(0,1.8,0)
    bg.ResetOnSpawn = false
    bg.Parent = PlayerGui

    local lbl = Instance.new("TextLabel", bg)
    lbl.Size = UDim2.new(1,0,1,0)
    lbl.BackgroundTransparency = 0.4
    lbl.BackgroundColor3 = Color3.fromRGB(0,0,0)
    lbl.TextColor3 = color or Color3.fromRGB(255,255,255)
    lbl.TextScaled = true
    lbl.Font = Enum.Font.SourceSansBold
    lbl.Text = initialText or tostring(inst.Name)

    return {gui = bg, label = lbl}
end

-- ===== STORAGE =====
local PlayerGUIs = {}    -- [player] = {gui,label}
local KeyGUIs = {}       -- [inst] = {gui,label}
local GrannyGUIs = {}    -- [model] = {gui,label}
local SpiderGUIs = {}    -- [model] = {gui,label}
local LocatorData = nil
local locatorConn = nil

-- ===== PLAYER ESP =====
local function ensurePlayerGui(plr)
    if PlayerGUIs[plr] then return PlayerGUIs[plr] end
    local hrp = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    local bg = Instance.new("BillboardGui")
    bg.Name = "G1_PlayerESP_"..plr.Name
    bg.Adornee = hrp
    bg.AlwaysOnTop = true
    bg.Size = UDim2.new(0,200,0,44)
    bg.StudsOffset = Vector3.new(0,2.2,0)
    bg.Parent = PlayerGui
    local lbl = Instance.new("TextLabel", bg)
    lbl.Size = UDim2.new(1,0,1,0)
    lbl.BackgroundTransparency = 0.4
    lbl.TextColor3 = Color3.fromRGB(0,255,0)
    lbl.TextScaled = true
    lbl.Font = Enum.Font.SourceSansBold
    PlayerGUIs[plr] = {gui = bg, label = lbl}
    bg.Enabled = false
    return PlayerGUIs[plr]
end

Players.PlayerRemoving:Connect(function(plr)
    if PlayerGUIs[plr] then pcall(function() PlayerGUIs[plr].gui:Destroy() end) PlayerGUIs[plr] = nil end
end)

-- ===== KEYS MANAGEMENT =====
local function addKey(inst)
    if not inst or not inst.Parent then return end
    if not table.find(KEY_LIST, inst.Name) then return end
    if KeyGUIs[inst] then return end
    local color = KEY_COLORS[inst.Name] or Color3.fromRGB(255,255,255)
    local info = createBillboard(inst, inst.Name, color)
    if info then
        KeyGUIs[inst] = info
        info.gui.Enabled = false
    end
end
local function removeKey(inst)
    local info = KeyGUIs[inst]
    if info and info.gui then pcall(function() info.gui:Destroy() end) end
    KeyGUIs[inst] = nil
end

local function setupPresetWatcher()
    local preset = Workspace:FindFirstChild("Preset3")
    if not preset then
        -- wait for creation
        Workspace.ChildAdded:Connect(function(c)
            if c.Name == "Preset3" then
                task.delay(0.05, function()
                    for _,ch in ipairs(c:GetChildren()) do addKey(ch) end
                    c.ChildAdded:Connect(addKey)
                    c.ChildRemoved:Connect(removeKey)
                end)
            end
        end)
        return
    end
    for _,ch in ipairs(preset:GetChildren()) do addKey(ch) end
    preset.ChildAdded:Connect(addKey)
    preset.ChildRemoved:Connect(removeKey)
end
setupPresetWatcher()

-- ===== GRANNY & SPIDER detection =====
local function scanForGranniesAndSpiders()
    for _, d in ipairs(Workspace:GetDescendants()) do
        if d:IsA("Model") and d.Parent ~= Players then
            local n = d.Name:lower()
            if n:find("granny") and not GrannyGUIs[d] then
                local info = createBillboard(d, "GRANNY", Color3.fromRGB(255,80,80))
                if info then GrannyGUIs[d] = info; info.gui.Enabled = false end
            end
            if n:find("spider") and not SpiderGUIs[d] then
                local info = createBillboard(d, "SPIDER", Color3.fromRGB(0,200,200))
                if info then SpiderGUIs[d] = info; info.gui.Enabled = false end
            end
        end
    end
end
scanForGranniesAndSpiders()
Workspace.DescendantAdded:Connect(function(d)
    task.delay(0.05, function()
        if d:IsA("Model") then
            local n = d.Name:lower()
            if n:find("granny") or n:find("spider") then scanForGranniesAndSpiders() end
        end
    end)
end)
Workspace.DescendantRemoving:Connect(function(d)
    if GrannyGUIs[d] then pcall(function() GrannyGUIs[d].gui:Destroy() end) GrannyGUIs[d] = nil end
    if SpiderGUIs[d] then pcall(function() SpiderGUIs[d].gui:Destroy() end) SpiderGUIs[d] = nil end
end)

-- ===== LOCATOR =====
local function ensureLocator()
    if LocatorData and LocatorData.gui and LocatorData.gui.Parent then return LocatorData end
    local bg = Instance.new("BillboardGui")
    bg.Name = "G1_Locator"
    bg.AlwaysOnTop = true
    bg.Size = UDim2.new(0,180,0,36)
    bg.StudsOffset = Vector3.new(0,1.8,0)
    bg.Parent = PlayerGui
    local lbl = Instance.new("TextLabel", bg)
    lbl.Size = UDim2.new(1,0,1,0)
    lbl.BackgroundTransparency = 0.4
    lbl.TextColor3 = Color3.fromRGB(0,255,0)
    lbl.TextScaled = true
    lbl.Font = Enum.Font.SourceSansBold
    lbl.Text = "No target"
    LocatorData = {gui = bg, label = lbl}
    LocatorData.gui.Enabled = false
    return LocatorData
end

local locatorConnection = nil
local function startLocator(mode, specificKeyName)
    ensureLocator()
    if not LocatorData then return end
    LocatorData.gui.Enabled = true
    if locatorConnection then locatorConnection:Disconnect() locatorConnection = nil end
    locatorConnection = RunService.RenderStepped:Connect(function()
        if mode == "NearestKey" then
            local nearestPart, nd = nil, math.huge
            for inst, info in pairs(KeyGUIs) do
                if inst and inst.Parent then
                    local part = getBasePart(inst)
                    if part then
                        local studs, txt = safeDistanceToPosition(part.Position)
                        if studs and studs < nd then nd = studs; nearestPart = part end
                    end
                end
            end
            if nearestPart then
                local _, txt = safeDistanceToPosition(nearestPart.Position)
                LocatorData.label.Text = txt or "N/A"
                LocatorData.gui.Adornee = nearestPart
                LocatorData.gui.Enabled = true
            else
                LocatorData.label.Text = "No key"
                LocatorData.gui.Enabled = false
            end

        elseif mode == "SpecificKey" then
            local preset = Workspace:FindFirstChild("Preset3")
            if preset then
                local inst = preset:FindFirstChild(specificKeyName)
                if inst and inst.Parent then
                    local part = getBasePart(inst)
                    if part then
                        local _, txt = safeDistanceToPosition(part.Position)
                        LocatorData.label.Text = txt or "N/A"
                        LocatorData.gui.Adornee = part
                        LocatorData.gui.Enabled = true
                    else
                        LocatorData.label.Text = "No part"
                        LocatorData.gui.Enabled = false
                    end
                else
                    LocatorData.label.Text = "Not found"
                    LocatorData.gui.Enabled = false
                end
            end

        elseif mode == "Player" then
            local nearestP, nd = nil, math.huge
            for _,p in ipairs(Players:GetPlayers()) do
                if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                    local studs, txt = safeDistanceToPosition(p.Character.HumanoidRootPart.Position)
                    if studs and studs < nd then nd = studs; nearestP = p end
                end
            end
            if nearestP and nearestP.Character and nearestP.Character:FindFirstChild("HumanoidRootPart") then
                local _, txt = safeDistanceToPosition(nearestP.Character.HumanoidRootPart.Position)
                LocatorData.label.Text = nearestP.Name .. "\n" .. (txt or "N/A")
                LocatorData.gui.Adornee = nearestP.Character.HumanoidRootPart
                LocatorData.gui.Enabled = true
            else
                LocatorData.label.Text = "No player"
                LocatorData.gui.Enabled = false
            end
        end
    end)
end

local function stopLocator()
    if locatorConnection then locatorConnection:Disconnect() locatorConnection = nil end
    if LocatorData and LocatorData.gui then LocatorData.gui.Enabled = false end
end

-- ===== MAIN UPDATE LOOP (render) =====
local ESPPlayersEnabled = false
local ESPKeysEnabled = false
local ESPGrannyEnabled = false
local ESPSpiderEnabled = false

RunService.RenderStepped:Connect(function()
    -- Players
    if ESPPlayersEnabled then
        for _, p in ipairs(Players:GetPlayers()) do
            if p ~= LocalPlayer and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                local info = ensurePlayerGui(p)
                if info then
                    local studs, txt = safeDistanceToPosition(p.Character.HumanoidRootPart.Position)
                    info.label.Text = p.Name .. "\n" .. (txt or "N/A")
                    info.gui.Adornee = p.Character.HumanoidRootPart
                    info.gui.Enabled = true
                end
            else
                if PlayerGUIs[p] and PlayerGUIs[p].gui then PlayerGUIs[p].gui.Enabled = false end
            end
        end
    else
        for p,info in pairs(PlayerGUIs) do if info and info.gui then info.gui.Enabled = false end end
    end

    -- Keys
    if ESPKeysEnabled then
        for inst, info in pairs(KeyGUIs) do
            if inst and inst.Parent and info and info.gui then
                local part = getBasePart(inst)
                if part then
                    local studs, txt = safeDistanceToPosition(part.Position)
                    info.label.Text = inst.Name .. "\n" .. (txt or "N/A")
                    info.gui.Adornee = part
                    info.gui.Enabled = true
                else
                    info.gui.Enabled = false
                end
            elseif info and info.gui then
                info.gui.Enabled = false
            end
        end
    else
        for inst, info in pairs(KeyGUIs) do if info and info.gui then info.gui.Enabled = false end end
    end

    -- Granny
    if ESPGrannyEnabled then
        for inst, info in pairs(GrannyGUIs) do
            if inst and inst.Parent and info and info.gui then
                local part = getBasePart(inst)
                if part then
                    local studs, txt = safeDistanceToPosition(part.Position)
                    info.label.Text = "GRANNY\n" .. (txt or "N/A")
                    info.gui.Adornee = part
                    info.gui.Enabled = true
                else
                    info.gui.Enabled = false
                end
            end
        end
    else
        for inst, info in pairs(GrannyGUIs) do if info and info.gui then info.gui.Enabled = false end end
    end

    -- Spider
    if ESPSpiderEnabled then
        for inst, info in pairs(SpiderGUIs) do
            if inst and inst.Parent and info and info.gui then
                local part = getBasePart(inst)
                if part then
                    local studs, txt = safeDistanceToPosition(part.Position)
                    info.label.Text = "SPIDER\n" .. (txt or "N/A")
                    info.gui.Adornee = part
                    info.gui.Enabled = true
                else
                    info.gui.Enabled = false
                end
            end
        end
    else
        for inst, info in pairs(SpiderGUIs) do if info and info.gui then info.gui.Enabled = false end end
    end
end)

-- ===== RAYFIELD UI CREATION =====
if not Rayfield then
    print("[Granny1] Rayfield not available â€” controls not shown. Check HttpGet or Rayfield source.")
else
    local Window = Rayfield:CreateWindow({
        Name = "Granny1 | ESP & Locator",
        LoadingTitle = "Granny1",
        LoadingSubtitle = "ESP & Locator",
        ConfigurationSaving = { Enabled = true, FolderName = "Granny1", FileName = "config" },
        KeySystem = false,
    })

    local Main = Window:CreateTab("Main")

    Main:CreateToggle({ Name = "ESP Players", Default = false, Callback = function(v)
        ESPPlayersEnabled = v
    end })

    Main:CreateToggle({ Name = "ESP Keys (all)", Default = false, Callback = function(v)
        ESPKeysEnabled = v
        if v then
            local preset = Workspace:FindFirstChild("Preset3")
            if preset then
                for _, name in ipairs(KEY_LIST) do
                    local inst = preset:FindFirstChild(name)
                    if inst then addKey(inst) end
                end
            end
        end
    end })

    Main:CreateToggle({ Name = "ESP Granny", Default = false, Callback = function(v)
        ESPGrannyEnabled = v
        if v then scanForGranniesAndSpiders() end
    end })

    Main:CreateToggle({ Name = "ESP Spider Granny", Default = false, Callback = function(v)
        ESPSpiderEnabled = v
        if v then scanForGranniesAndSpiders() end
    end })

    Main:CreateDropdown({ Name = "Locator Mode", Default = "NearestKey", Options = { "NearestKey", "SpecificKey", "Player" }, Callback = function(opt)
        LocatorMode = opt
    end })

    Main:CreateDropdown({ Name = "Specific Key", Default = KEY_LIST[1], Options = KEY_LIST, Callback = function(opt)
        LocatorSpecificKey = opt
    end })

    Main:CreateButton({ Name = "Start Locator", Callback = function()
        startLocator(LocatorMode, LocatorSpecificKey)
    end })

    Main:CreateButton({ Name = "Stop Locator", Callback = function()
        stopLocator()
    end })

    Main:CreateButton({ Name = "Focus Camera to Nearest Key", Callback = function()
        -- one-shot focus
        local preset = Workspace:FindFirstChild("Preset3")
        if preset then
            local nearestPart, nd = nil, math.huge
            for _, name in ipairs(KEY_LIST) do
                local inst = preset:FindFirstChild(name)
                if inst and inst.Parent then
                    local part = getBasePart(inst)
                    if part then
                        local studs, _ = safeDistanceToPosition(part.Position)
                        if studs and studs < nd then nd = studs; nearestPart = part end
                    end
                end
            end
            if nearestPart then
                pcall(function() Camera.CFrame = CFrame.new(Camera.CFrame.Position, nearestPart.Position) end)
            end
        end
    end })

    Window:MakeNotification({
        Name = "Loaded",
        Content = "Granny1 ESP loaded (Rayfield)",
        Image = "",
        Duration = 3
    })
end

print("[Granny1] Script loaded. Rayfield:", tostring(Rayfield ~= nil))
